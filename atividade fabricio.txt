1. Importa√ß√£o da biblioteca
ts
Copiar
Editar
import * as readlineSync from 'readline-sync';
A gente usa essa biblioteca para ler o que o usu√°rio digita no terminal.
Sem ela, o TypeScript n√£o consegue conversar com o teclado.

2. Mostrar o menu
ts
Copiar
Editar
console.log("Menu de Op√ß√µes:");
console.log("1 ‚Äì Criar um cadastro");
console.log("2 ‚Äì Excluir um cadastro");
console.log("3 ‚Äì Atualizar um cadastro");
console.log("4 ‚Äì Listar cadastros");
Aqui o sistema s√≥ exibe o menu com as op√ß√µes num√©ricas.

3. Ler a op√ß√£o escolhida pelo usu√°rio
ts
Copiar
Editar
const opcao = readlineSync.question("Escolha uma op√ß√£o (1-4): ");
Esse comando pergunta ao usu√°rio e guarda a resposta (como texto) na vari√°vel opcao.

4. Converter a op√ß√£o para n√∫mero
ts
Copiar
Editar
const opcaoNum = parseInt(opcao);
Como a resposta vem como texto, usamos parseInt para transformar em n√∫mero. Isso √© importante para o switch funcionar.

5. Selecionar a a√ß√£o com switch
ts
Copiar
Editar
switch (opcaoNum) {
  case 1:
    console.log("Voc√™ escolheu: Criar um cadastro");
    break;
  ...
  default:
    console.log("Op√ß√£o inv√°lida.");
}
O switch funciona como uma escolha entre v√°rios caminhos.
Ele compara o n√∫mero que o usu√°rio digitou com os casos:

Se for 1, mostra que vai criar um cadastro.

Se for 2, mostra que vai excluir.

E assim por diante.

Se for qualquer n√∫mero fora de 1 a 4, cai no default, e mostra "op√ß√£o inv√°lida".

üì¢ Como explicar na sala (dica de fala):
"Esse c√≥digo √© um menu interativo no terminal. Ele mostra 4 op√ß√µes pro usu√°rio escolher.
Usamos o readline-sync pra conseguir ler o que a pessoa digita.
Depois, com o switch, o programa compara a op√ß√£o escolhida e mostra qual a√ß√£o o usu√°rio selecionou.
Se a op√ß√£o n√£o for v√°lida, ele avisa. √â uma forma b√°sica de simular um menu em sistemas reais."

npm install readline-sync
npm install --save-dev typescript ts-node @types/node @types/readline-sync


